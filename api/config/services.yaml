# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
   app.user_roles: [{"name":"ROLE_ADMIN", "label":"Admins"},{"name":"ROLE_SCIENTIST", "label":"Scientist"}]
   app.valid_user_roles: ["ROLE_ADMIN", "ROLE_SCIENTIST"]
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
    App\OpenApi\JwtDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: ['@.inner']
    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
    App\Filter\QueryFilter:
        arguments:
            $searchParameterName: 'query'
    App\OpenApi\UserRolesDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: ['@.inner']
    App\OpenApi\CountUsersDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: ['@.inner']
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
